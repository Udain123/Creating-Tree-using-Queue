#include <iostream>
using namespace std;

class Node{
    public:
        Node *lchild;
        int data;
        Node *rchild;
};
Node *root=NULL;

class Queue{
    public:
        int size;
        int front;
        int rear;
        Node **Q;
};

void enqueue(Queue *q, Node *x)
{
    if((q->rear+1)%q->size==q->front)        //circular queue concept.
    {
        cout<<"Queue is Full";
    }
    else
    {
        q->rear=(q->rear+1)%q->size;
        q->Q[q->rear]=x;
    }
}

Node* dequeue(Queue *q)
{
    Node *x=NULL;
    if(q->front==q->rear)
    {
        cout<<"Queue is Empty";
    }
    else
    {
        q->front=(q->front+1)%q->size;
        x=q->Q[q->front];
    }
    return x;
}


int isEmpty(Queue q)
{
    return q.front==q.rear;
}

void Create()
{
    Node *p,*t=NULL;
    int x;
    Queue q;
    cout<<"Enter Size of Queue: ";
    cin>>q.size;
    q.front=-1;
    q.rear=-1;
    q.Q=new Node*[q.size];
    cout<<"Enter Root Value: ";
    cin>>x;
    root=new Node;
    root->data=x;
    root->lchild=NULL;
    root->rchild=NULL;
    enqueue(&q,root);
    while(!isEmpty(q))
    {
        p=dequeue(&q);
        cout<<"Enter Left Child of "<<p->data<<" ";
        cin>>x;
        if(x!=-1)
        {
            t=new Node;
            t->data=x;
            t->lchild=0;
            t->rchild=0;
            p->lchild=t;
            enqueue(&q,t);
        }
        cout<<"Enter Right Child of "<<p->data<<" ";
        cin>>x;
        if(x!=-1)
        {
            t=new Node;
            t->data=x;
            t->lchild=0;
            t->rchild=0;
            p->rchild=t;
            enqueue(&q,t);
        }
    }
}

void preorder(Node *p)
{
    
    if(p)
    {
        cout<<p->data<<" ";
        preorder(p->lchild);
        preorder(p->rchild);
    }
}

void inorder(Node *p)
{
    
    if(p)
    {
        inorder(p->lchild);
        cout<<p->data<<" ";
        inorder(p->rchild);
    }
}

void postorder(Node *p)
{
    
    if(p)
    {
        postorder(p->lchild);
        postorder(p->rchild);
        cout<<p->data<<" ";
    }
}

int main()
{
    Create();
    cout<<"Preorder: ";
    preorder(root);
    cout<<"\n Inorder: ";
    inorder(root);
    cout<<"\n Postorder: ";
    postorder(root);
    return 0;
}
